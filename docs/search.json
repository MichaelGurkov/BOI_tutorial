[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to BOI DS course tutorials",
    "section": "",
    "text": "This website contains tutorials and exercise sets on various topics to help you learn and apply concepts introduced in the course."
  },
  {
    "objectID": "index.html#topics",
    "href": "index.html#topics",
    "title": "Welcome to BOI DS course tutorials",
    "section": "Topics",
    "text": "Topics\n\nData Wrangling with dplyr\n\nExercises for “Data Wrangling with dplyr”\n\n\nExplore the topics and start learning!"
  },
  {
    "objectID": "dplyr/dplyr.html",
    "href": "dplyr/dplyr.html",
    "title": "Wrangling Data with dplyr",
    "section": "",
    "text": "In this tutorial, we’ll explore some of the most useful verbs in the dplyr package for data manipulation: select, filter, mutate, summarize, and arrange. We’ll use the Palmer penguins dataset to demonstrate each of these functions. The palmerpenguins package provides data on three penguin species from the Palmer Archipelago, Antarctica.\n\n\nFirst, we’ll load the required libraries and the Palmer penguins dataset.\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n\n# Take a look at the data\nglimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male…\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\n\n\n\nThe select function allows us to choose specific columns from the dataset. For instance, we might only be interested in the species, island, and bill length columns.\n\n# Select specific columns\npenguins_selected = penguins %&gt;%\n  select(species, island, bill_length_mm)\n\n# View the first few rows of the selected columns\nhead(penguins_selected)\n\n# A tibble: 6 × 3\n  species island    bill_length_mm\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;\n1 Adelie  Torgersen           39.1\n2 Adelie  Torgersen           39.5\n3 Adelie  Torgersen           40.3\n4 Adelie  Torgersen           NA  \n5 Adelie  Torgersen           36.7\n6 Adelie  Torgersen           39.3\n\n\n\n\n\nThe filter function helps us subset rows based on specific conditions. Let’s filter the data to only include observations where the bill length is greater than 40 mm.\n\n# Filter rows where bill length is greater than 40 mm\npenguins_filtered = penguins %&gt;%\n  filter(bill_length_mm &gt; 40)\n\n# View the first few rows of the filtered data\nhead(penguins_filtered)\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           40.3          18                 195        3250\n2 Adelie  Torgersen           42            20.2               190        4250\n3 Adelie  Torgersen           41.1          17.6               182        3200\n4 Adelie  Torgersen           42.5          20.7               197        4500\n5 Adelie  Torgersen           46            21.5               194        4200\n6 Adelie  Biscoe              40.6          18.6               183        3550\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\n\n\nWith mutate, we can create new columns or transform existing ones. Suppose we want to calculate the bill length in centimeters.\n\n# Create a new column for bill length in cm\npenguins_mutated = penguins %&gt;%\n  mutate(bill_length_cm = bill_length_mm / 10)\n\n# View the first few rows to see the new column\nhead(penguins_mutated)\n\n# A tibble: 6 × 9\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 3 more variables: sex &lt;fct&gt;, year &lt;int&gt;, bill_length_cm &lt;dbl&gt;\n\n\n\n\n\nThe summarize function allows us to compute summary statistics. To get a summary of the average bill length by species, we can use group_by in combination with summarize.\n\n# Summarize average bill length by species\npenguins_summary = penguins %&gt;%\n  group_by(species) %&gt;%\n  summarize(avg_bill_length = mean(bill_length_mm, na.rm = TRUE))\n\n# View the summary\npenguins_summary\n\n# A tibble: 3 × 2\n  species   avg_bill_length\n  &lt;fct&gt;               &lt;dbl&gt;\n1 Adelie               38.8\n2 Chinstrap            48.8\n3 Gentoo               47.5\n\n\n\n\n\nFinally, arrange allows us to sort the data. Let’s sort the penguins dataset by bill length in descending order.\n\n# Sort the data by bill length in descending order\npenguins_arranged = penguins %&gt;%\n  arrange(desc(bill_length_mm))\n\n# View the first few rows of the sorted data\nhead(penguins_arranged)\n\n# A tibble: 6 × 8\n  species   island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;     &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Gentoo    Biscoe           59.6          17                 230        6050\n2 Chinstrap Dream            58            17.8               181        3700\n3 Gentoo    Biscoe           55.9          17                 228        5600\n4 Chinstrap Dream            55.8          19.8               207        4000\n5 Gentoo    Biscoe           55.1          16                 230        5850\n6 Gentoo    Biscoe           54.3          15.7               231        5650\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\n\n\nWe can combine these verbs to perform more complex data manipulations. For example, let’s select the species, island, and bill length columns, filter for bill lengths greater than 40 mm, and then sort by bill length.\n\n# Combine select, filter, and arrange\npenguins_combined = penguins %&gt;%\n  select(species, island, bill_length_mm) %&gt;%\n  filter(bill_length_mm &gt; 40) %&gt;%\n  arrange(desc(bill_length_mm))\n\n# View the result\nhead(penguins_combined)\n\n# A tibble: 6 × 3\n  species   island bill_length_mm\n  &lt;fct&gt;     &lt;fct&gt;           &lt;dbl&gt;\n1 Gentoo    Biscoe           59.6\n2 Chinstrap Dream            58  \n3 Gentoo    Biscoe           55.9\n4 Chinstrap Dream            55.8\n5 Gentoo    Biscoe           55.1\n6 Gentoo    Biscoe           54.3\n\n\nThese dplyr functions provide a powerful and intuitive way to manipulate and analyze your data. With practice, you’ll find them indispensable for your data wrangling tasks."
  },
  {
    "objectID": "dplyr/dplyr.html#loading-the-necessary-libraries",
    "href": "dplyr/dplyr.html#loading-the-necessary-libraries",
    "title": "Wrangling Data with dplyr",
    "section": "",
    "text": "First, we’ll load the required libraries and the Palmer penguins dataset.\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n\n# Take a look at the data\nglimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male…\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…"
  },
  {
    "objectID": "dplyr/dplyr.html#select-choose-specific-columns",
    "href": "dplyr/dplyr.html#select-choose-specific-columns",
    "title": "Wrangling Data with dplyr",
    "section": "",
    "text": "The select function allows us to choose specific columns from the dataset. For instance, we might only be interested in the species, island, and bill length columns.\n\n# Select specific columns\npenguins_selected = penguins %&gt;%\n  select(species, island, bill_length_mm)\n\n# View the first few rows of the selected columns\nhead(penguins_selected)\n\n# A tibble: 6 × 3\n  species island    bill_length_mm\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;\n1 Adelie  Torgersen           39.1\n2 Adelie  Torgersen           39.5\n3 Adelie  Torgersen           40.3\n4 Adelie  Torgersen           NA  \n5 Adelie  Torgersen           36.7\n6 Adelie  Torgersen           39.3"
  },
  {
    "objectID": "dplyr/dplyr.html#filter-subset-rows-based-on-conditions",
    "href": "dplyr/dplyr.html#filter-subset-rows-based-on-conditions",
    "title": "Wrangling Data with dplyr",
    "section": "",
    "text": "The filter function helps us subset rows based on specific conditions. Let’s filter the data to only include observations where the bill length is greater than 40 mm.\n\n# Filter rows where bill length is greater than 40 mm\npenguins_filtered = penguins %&gt;%\n  filter(bill_length_mm &gt; 40)\n\n# View the first few rows of the filtered data\nhead(penguins_filtered)\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           40.3          18                 195        3250\n2 Adelie  Torgersen           42            20.2               190        4250\n3 Adelie  Torgersen           41.1          17.6               182        3200\n4 Adelie  Torgersen           42.5          20.7               197        4500\n5 Adelie  Torgersen           46            21.5               194        4200\n6 Adelie  Biscoe              40.6          18.6               183        3550\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "dplyr/dplyr.html#mutate-create-or-transform-columns",
    "href": "dplyr/dplyr.html#mutate-create-or-transform-columns",
    "title": "Wrangling Data with dplyr",
    "section": "",
    "text": "With mutate, we can create new columns or transform existing ones. Suppose we want to calculate the bill length in centimeters.\n\n# Create a new column for bill length in cm\npenguins_mutated = penguins %&gt;%\n  mutate(bill_length_cm = bill_length_mm / 10)\n\n# View the first few rows to see the new column\nhead(penguins_mutated)\n\n# A tibble: 6 × 9\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 3 more variables: sex &lt;fct&gt;, year &lt;int&gt;, bill_length_cm &lt;dbl&gt;"
  },
  {
    "objectID": "dplyr/dplyr.html#summarize-aggregate-data",
    "href": "dplyr/dplyr.html#summarize-aggregate-data",
    "title": "Wrangling Data with dplyr",
    "section": "",
    "text": "The summarize function allows us to compute summary statistics. To get a summary of the average bill length by species, we can use group_by in combination with summarize.\n\n# Summarize average bill length by species\npenguins_summary = penguins %&gt;%\n  group_by(species) %&gt;%\n  summarize(avg_bill_length = mean(bill_length_mm, na.rm = TRUE))\n\n# View the summary\npenguins_summary\n\n# A tibble: 3 × 2\n  species   avg_bill_length\n  &lt;fct&gt;               &lt;dbl&gt;\n1 Adelie               38.8\n2 Chinstrap            48.8\n3 Gentoo               47.5"
  },
  {
    "objectID": "dplyr/dplyr.html#arrange-sort-data",
    "href": "dplyr/dplyr.html#arrange-sort-data",
    "title": "Wrangling Data with dplyr",
    "section": "",
    "text": "Finally, arrange allows us to sort the data. Let’s sort the penguins dataset by bill length in descending order.\n\n# Sort the data by bill length in descending order\npenguins_arranged = penguins %&gt;%\n  arrange(desc(bill_length_mm))\n\n# View the first few rows of the sorted data\nhead(penguins_arranged)\n\n# A tibble: 6 × 8\n  species   island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;     &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Gentoo    Biscoe           59.6          17                 230        6050\n2 Chinstrap Dream            58            17.8               181        3700\n3 Gentoo    Biscoe           55.9          17                 228        5600\n4 Chinstrap Dream            55.8          19.8               207        4000\n5 Gentoo    Biscoe           55.1          16                 230        5850\n6 Gentoo    Biscoe           54.3          15.7               231        5650\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "dplyr/dplyr.html#putting-it-all-together",
    "href": "dplyr/dplyr.html#putting-it-all-together",
    "title": "Wrangling Data with dplyr",
    "section": "",
    "text": "We can combine these verbs to perform more complex data manipulations. For example, let’s select the species, island, and bill length columns, filter for bill lengths greater than 40 mm, and then sort by bill length.\n\n# Combine select, filter, and arrange\npenguins_combined = penguins %&gt;%\n  select(species, island, bill_length_mm) %&gt;%\n  filter(bill_length_mm &gt; 40) %&gt;%\n  arrange(desc(bill_length_mm))\n\n# View the result\nhead(penguins_combined)\n\n# A tibble: 6 × 3\n  species   island bill_length_mm\n  &lt;fct&gt;     &lt;fct&gt;           &lt;dbl&gt;\n1 Gentoo    Biscoe           59.6\n2 Chinstrap Dream            58  \n3 Gentoo    Biscoe           55.9\n4 Chinstrap Dream            55.8\n5 Gentoo    Biscoe           55.1\n6 Gentoo    Biscoe           54.3\n\n\nThese dplyr functions provide a powerful and intuitive way to manipulate and analyze your data. With practice, you’ll find them indispensable for your data wrangling tasks."
  },
  {
    "objectID": "dplyr/dplyr_exercises.html",
    "href": "dplyr/dplyr_exercises.html",
    "title": "Tutorials for DS course materials",
    "section": "",
    "text": "# load libraries\n\nlibrary(tidyverse)\n\nSample Data Frame for Exercises\n\n# Make data for exercises\n\ndata = tibble(\n  id = 1:10,\n  name = c(\n    \"Alice\",\n    \"Bob\",\n    \"Charlie\",\n    \"David\",\n    \"Eva\",\n    \"Frank\",\n    \"Grace\",\n    \"Hannah\",\n    \"Ian\",\n    \"Jack\"\n  ),\n  age = c(23, 45, 34, 27, 19, 31, 29, 41, 36, 24),\n  score = c(85, 92, 88, 91, 76, 83, 77, 89, 94, 78)\n)\n\n\nExercises\n\nSelect the columns name and age.\n\n\n\nShow the code\nselected_data = data %&gt;%\n  select(name, age)\n\nselected_data\n\n\n# A tibble: 10 × 2\n   name      age\n   &lt;chr&gt;   &lt;dbl&gt;\n 1 Alice      23\n 2 Bob        45\n 3 Charlie    34\n 4 David      27\n 5 Eva        19\n 6 Frank      31\n 7 Grace      29\n 8 Hannah     41\n 9 Ian        36\n10 Jack       24\n\n\n\nSelect the columns id, name, and score.\n\n\n\nShow the code\nselected_data = data %&gt;%\n  select(id, name, score)\n\nselected_data\n\n\n# A tibble: 10 × 3\n      id name    score\n   &lt;int&gt; &lt;chr&gt;   &lt;dbl&gt;\n 1     1 Alice      85\n 2     2 Bob        92\n 3     3 Charlie    88\n 4     4 David      91\n 5     5 Eva        76\n 6     6 Frank      83\n 7     7 Grace      77\n 8     8 Hannah     89\n 9     9 Ian        94\n10    10 Jack       78\n\n\n\nFilter the rows where age is greater than 30.\n\n\n\nShow the code\nfiltered_data = data %&gt;%\n  filter(age &gt; 30)\n\nfiltered_data\n\n\n# A tibble: 5 × 4\n     id name      age score\n  &lt;int&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;\n1     2 Bob        45    92\n2     3 Charlie    34    88\n3     6 Frank      31    83\n4     8 Hannah     41    89\n5     9 Ian        36    94\n\n\n\nFilter the rows where score is less than 80.\n\n\nfiltered_data = data %&gt;%\n  filter(score &lt; 80)\n\nfiltered_data\n\n# A tibble: 3 × 4\n     id name    age score\n  &lt;int&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     5 Eva      19    76\n2     7 Grace    29    77\n3    10 Jack     24    78\n\n\n\nCreate a new column age_in_months which is age multiplied by 12.\n\n\n\nShow the code\nmutated_data = data %&gt;%\n  mutate(age_in_months = age * 12)\n\nmutated_data\n\n\n# A tibble: 10 × 5\n      id name      age score age_in_months\n   &lt;int&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;         &lt;dbl&gt;\n 1     1 Alice      23    85           276\n 2     2 Bob        45    92           540\n 3     3 Charlie    34    88           408\n 4     4 David      27    91           324\n 5     5 Eva        19    76           228\n 6     6 Frank      31    83           372\n 7     7 Grace      29    77           348\n 8     8 Hannah     41    89           492\n 9     9 Ian        36    94           432\n10    10 Jack       24    78           288\n\n\n\nCreate a new column score_category which is “high” if score is greater than 90 and “low” otherwise.\n\n\n\nShow the code\nmutated_data = data %&gt;%\n  mutate(score_category = ifelse(score &gt; 90, \"high\", \"low\"))\n\nmutated_data\n\n\n# A tibble: 10 × 5\n      id name      age score score_category\n   &lt;int&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;         \n 1     1 Alice      23    85 low           \n 2     2 Bob        45    92 high          \n 3     3 Charlie    34    88 low           \n 4     4 David      27    91 high          \n 5     5 Eva        19    76 low           \n 6     6 Frank      31    83 low           \n 7     7 Grace      29    77 low           \n 8     8 Hannah     41    89 low           \n 9     9 Ian        36    94 high          \n10    10 Jack       24    78 low           \n\n\n\nCalculate the average score for the entire dataset.\n\n\n\nShow the code\nsummary_data = data %&gt;%\n  summarize(avg_score = mean(score))\n\nsummary_data\n\n\n# A tibble: 1 × 1\n  avg_score\n      &lt;dbl&gt;\n1      85.3\n\n\n\nCalculate the average age and the maximum score.\n\n\n\nShow the code\nsummary_data = data %&gt;%\n  summarize(avg_age = mean(age), max_score = max(score))\n\nsummary_data\n\n\n# A tibble: 1 × 2\n  avg_age max_score\n    &lt;dbl&gt;     &lt;dbl&gt;\n1    30.9        94\n\n\n\nArrange the dataset by age in ascending order.\n\n\n\nShow the code\narranged_data = data %&gt;%\n  arrange(age)\n\narranged_data\n\n\n# A tibble: 10 × 4\n      id name      age score\n   &lt;int&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;\n 1     5 Eva        19    76\n 2     1 Alice      23    85\n 3    10 Jack       24    78\n 4     4 David      27    91\n 5     7 Grace      29    77\n 6     6 Frank      31    83\n 7     3 Charlie    34    88\n 8     9 Ian        36    94\n 9     8 Hannah     41    89\n10     2 Bob        45    92\n\n\n\nArrange the dataset by score in descending order.\n\n\n\nShow the code\narranged_data = data %&gt;%\n  arrange(desc(score))\n\narranged_data\n\n\n# A tibble: 10 × 4\n      id name      age score\n   &lt;int&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;\n 1     9 Ian        36    94\n 2     2 Bob        45    92\n 3     4 David      27    91\n 4     8 Hannah     41    89\n 5     3 Charlie    34    88\n 6     1 Alice      23    85\n 7     6 Frank      31    83\n 8    10 Jack       24    78\n 9     7 Grace      29    77\n10     5 Eva        19    76"
  }
]