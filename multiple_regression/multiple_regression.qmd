---
title: "Multiple Linear Regression with [Boston Housing Data](../datasets/boston.qmd)"
format: html
execute: 
  cache: true
---

# Introduction

In this tutorial, we'll explore how to perform a multiple linear regression using the Boston housing dataset. Multiple linear regression is an extension of simple linear regression that allows us to model the relationship between a dependent variable and multiple independent variables. Here, we'll investigate how the median value of owner-occupied homes (medv) is influenced by the average number of rooms per dwelling (rm) and the proportion of owner-occupied units built before 1940 (age).

We'll be using the `tidyverse` and `tidymodels` libraries in R for data manipulation and modeling. Let's get started!

# Load Necessary Libraries

First, we'll load the required libraries. The `tidyverse` package provides tools for data manipulation and visualization, while `tidymodels` is a suite of packages for modeling. 

```{r load_libraries}
library(tidyverse)
library(tidymodels)
```

# Load the Data

Next, we'll load the Boston housing dataset and select the relevant columns.

```{r load_data, cache=TRUE}
boston_data = MASS::Boston %>%
  select(rm, age, medv)
```

# Fit the Multiple Linear Regression Model

Now, we'll fit a multiple linear regression model. Our goal is to predict `medv` using `rm` and `age`. We will create a preprocessing recipe to handle interactions.

The `recipe` package, part of the `tidymodels` ecosystem, provides a way to preprocess data before modeling. We define the transformations to apply to our data in a consistent and reusable manner using "steps".

- `step_interact()`: Creates interaction terms between variables.

```{r fit_linear_reg, cache=TRUE}
preprocess_recipe = recipe(medv ~ ., data = boston_data) %>% 
  step_interact(terms = ~rm:age)
```

We then define our model specification using `linear_reg()`.

```{r model_spec, cache=TRUE}
model_spec = linear_reg()
```

Next, we use a `workflow`, a concept from the `tidymodels` package that helps streamline the modeling process by bundling together the preprocessing and modeling steps. This makes the workflow easier to manage and ensures that all steps are consistently applied.

- `add_recipe()`: Adds the preprocessing recipe to the workflow.
- `add_model()`: Adds the model specification to the workflow.

Finally, we fit the workflow to the data.

```{r linear_model_workflow, cache=TRUE}
linear_model_workflow = workflow() %>% 
  add_recipe(preprocess_recipe) %>% 
  add_model(model_spec) %>% 
  fit(boston_data)
```

Alternatively, we can specify a model without an intercept.

```{r fit_linear_reg_no_intercept, eval=FALSE, cache=TRUE}
preprocess_recipe = recipe(medv ~ ., data = boston_data) %>% 
  step_interact(terms = ~rm:age)

model_spec = linear_reg() %>% 
  set_engine("lm")

linear_model_workflow = workflow() %>% 
  add_recipe(preprocess_recipe) %>% 
  add_model(model_spec, formula = medv ~ 0 + . -rm) %>% 
  fit(boston_data)
```

# Inspect the Model Coefficients

After fitting the model, it's essential to inspect the coefficients to understand the relationship between the variables.

```{r coefficients, cache=TRUE}
linear_model_workflow %>% 
  tidy()
```

# Make Predictions

Finally, we'll use our model to make predictions.

```{r predict}
predictions = linear_model_workflow %>% 
  predict(boston_data)
```

# Conclusion

In this tutorial, we demonstrated how to perform a multiple linear regression using the Boston housing dataset. We went through loading the data, fitting a model with preprocessing steps, inspecting the coefficients, and making predictions. This technique can be extended to include more variables and interactions, providing a robust tool for understanding complex relationships in your data.

Feel free to explore further by adding more variables or trying different types of models. Happy coding!
